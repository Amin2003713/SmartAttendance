@using Blazored.FluentValidation
@using FluentValidation
@typeparam TModel
@inject IValidator<TModel> Validator

<EditForm Model="Model" OnValidSubmit="HandleValidSubmit"
          Enhance="@Enhance" FormName="@FormName" AdditionalAttributes="@AdditionalAttributes">

    <FluentValidationValidator/>

    <CascadingValue Value="this">
        @FormProps
    </CascadingValue>

    @if (SubmitButton is not null)
    {
        @SubmitButton
    }
</EditForm>


@code {
    

    


    [Parameter] public TModel Model { get; set; } = default!;


    [Parameter] public EventCallback<TModel> OnValidSubmit { get; set; }


    [Parameter] public RenderFragment FormProps { get; set; } = default!;


    [Parameter] public RenderFragment? SubmitButton { get; set; }


    [Parameter] public bool Enhance { get; set; } = true;


    [Parameter] public string? FormName { get; set; }


    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string , object>? AdditionalAttributes { get; set; }

    private List<string> ValidationErrors { get; set; } = new ();


    private async Task HandleValidSubmit()
    {
        ValidationErrors.Clear();

        if (Validator is not null)
        {
            var result = await Validator.ValidateAsync(Model);

            if (!result.IsValid)
            {
                ValidationErrors = result.Errors.Select(e => e.ErrorMessage).ToList();
                return;
            }
        }

        await OnValidSubmit.InvokeAsync(Model);
    }

}
