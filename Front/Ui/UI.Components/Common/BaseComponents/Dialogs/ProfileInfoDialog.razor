@using App.Applications.Users.Requests.UpdateUser
@using App.Applications.Users.Requests.UploadProfilePicture
@using App.Applications.Users.Requests.UserInfos
@using App.Domain.Users
<MudDialog>
    <DialogContent>

        <MudStack Spacing="2">
            <!-- دکمه‌ی سوییچ حالت -->
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudText Typo="Typo.h6">اطلاعات کاربر</MudText>
                <MudButton Variant="Variant.Filled"
                           Color="@(_Editing ? Color.Secondary : Color.Primary)"
                           OnClick="ToggleEdit">
                    @(_Editing ? "بازگشت به نمایش" : "ویرایش")

                </MudButton>
            </MudStack>

            <MudForm @ref="_form" Model="_editModel" Disabled="!_Editing">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField Variant="Variant.Outlined" @bind-Value="StateProvider.User!.UserName"
                                      Label="نام کاربری" ReadOnly Disabled/>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="_editModel.Email" Variant="Variant.Outlined" Label="ایمیل"/>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="_editModel.FirstName" Label="نام" Variant="Variant.Outlined"/>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="_editModel.LastName" Variant="Variant.Outlined"
                                      Label="نام خانوادگی"/>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="StateProvider.User!.PhoneNumber" ReadOnly Disabled
                                      Variant="Variant.Outlined" Label="شماره تماس"/>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudFileUpload T="IBrowserFile" FilesChanged="OnFilesSelected!">
                            <ActivatorContent>
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           FullWidth
                                           StartIcon="@MaterialIcons.Filled.CloudUpload">
                                    @if (string.IsNullOrEmpty(_browserFile?.Name ?? null))
                                    {
                                        @("تصویر پروفایل(اختیاری)")
                                    }
                                    else
                                    {
                                        @(_browserFile?.Name)
                                    }
                                </MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                    </MudItem>
                    <MudItem xs="12" sm="12">
                        <MudTextField Variant="Variant.Outlined" @bind-Value="_editModel.Address" Label="آدرس"/>
                    </MudItem>
                </MudGrid>
            </MudForm>

        </MudStack>

    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Info" OnClick="Cancel">انصراف</MudButton>
        <MudButton Color="@(_Editing ? Color.Success : Color.Warning)" OnClick="Submit">
            @(_Editing ? "ذخیره" : "تأیید") ؟
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public UserInfo? Model { get; set; }
    [Parameter] public bool AllowEdit { get; set; } = true;


    private IBrowserFile? _browserFile  ;
    public bool _Editing { get; set; }

    private MudForm?             _form;
    private UpdateProfileRequest _editModel = new();
    private string?              _newRole;

    public string[] Roles => GetRoles();

    

    

    private string[] GetRoles()
    {
        if (StateProvider.User!.Roles!.Contains("Doctor"))
            return
            [
                "Secretary",
                "Patient"
            ];

        if (StateProvider.User!.Roles!.Contains("Secretary"))
            return ["Patient"];

        return [];
    }

    private Task OnFilesSelected(IBrowserFile file)
    {
        _browserFile = null;


        _browserFile = file;
        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        if (Model is not null)
        {
            _editModel = new UpdateProfileRequest
            {
                FirstName = Model.FirstName,
                LastName  = Model.LastName,

                Address = Model.Address,

                Email = Model.Email
            };
        }
    }

    private void ToggleEdit()
    {
        if (!AllowEdit) return;

        _Editing = !_Editing;
    }

    private async Task Submit()
    {
        if (_Editing)
        {
            if (_form is not null)
            {
                await _form.Validate();
                if (!_form.IsValid) return;

                if (_browserFile?.Name != null)
                    _editModel.Profile =  await Mediator.Send(new UploadProfilePictureRequest(_browserFile));


                await Mediator.Send(_editModel);

                var newInfo = await Mediator.Send(new UserInfoRequest());
                _editModel = newInfo.Adapt<UpdateProfileRequest>();
                _Editing = false;
                StateHasChanged();
                
            }
        }
        else
        {
            MudDialog.Close();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private string ToPersian(string value)
    {
        return value switch
               {
                   "Secretary" => "منشی",
                   "Patient"   => "بیمار",
                   "Doctor"    => "دکتر",
                   _           => throw new ArgumentOutOfRangeException(nameof(value), value, null)
               };
    }

}
