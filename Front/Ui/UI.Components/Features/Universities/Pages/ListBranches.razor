@page "/list-branches"
@using App.Applications.Universities.Queries.ListAvailableUniversities
@using App.Applications.Universities.Responses.GetCompanyInfo
@using Microsoft.AspNetCore.Authorization
@using App.Common.General
@using MudBlazor
@attribute [AllowAnonymous]

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-8 pa-4">
    <MudPaper Elevation="2" Class="pa-6 rounded-xl mb-6">
        <MudText Typo="Typo.h4" Color="Color.Primary" Align="Align.Center" GutterBottom="true">
            دانشگاه های فعال.
        </MudText>
        <MudText Typo="Typo.body1" Color="Color.Primary" Align="Align.Center">
            دانشگاه مورد نظر خود را انتخاب کنید.
        </MudText>
    </MudPaper>

    @if (IsLoading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Class="d-flex justify-center my-8"/>
    }
    else if (Universities != null && Universities.Any())
    {
        <MudGrid Justify="Justify.Center" Spacing="4">
            @foreach (var uni in Universities)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard
                        Style="height: 100%; display: flex; flex-direction: column; transition: transform 0.3s ease-in-out;"
                        Elevation="4"
                        @onclick="() => NavigateToUni(uni.Domain)">


                        <MudCardContent Class="pt-4 pb-6 px-4" Style="flex-grow: 1;">
                            <MudGrid>
                                <MudItem md="6">
                                    <MudImage Src="@uni.Logo"/>
                                </MudItem>
                                <MudItem md="6">
                                    <MudText>2</MudText>
                                    <MudText>3</MudText>
                                    <MudText>4</MudText>
                                    <MudText>54</MudText>
                                    <MudText>342</MudText>
                                    <MudText>234</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>

                        <MudCardActions Class="px-4 pb-4">
                            <MudButton Variant="Variant.Text" Color="Color.Primary"
                                       EndIcon="@Icons.Filled.ArrowForward" FullWidth="true">
                                Explore
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <MudPaper Elevation="1" Class="pa-8 rounded-lg d-flex flex-column align-center justify-center"
                  Style="min-height: 300px;">
            <MudIcon Icon="@Icons.Filled.School" Size="Size.Large" Color="Color.Secondary" Class="mb-4"/>
            <MudText Typo="Typo.h5" Color="Color.Secondary" Align="Align.Center" GutterBottom="true">
                No Universities Available
            </MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary" Align="Align.Center">
                Check back later or contact support for more information.
            </MudText>
        </MudPaper>
    }
</MudContainer>

@code {
    private List<GetUniversityInfoResponse> Universities { get; set; } = new();
    private bool IsLoading { get; set; } = true;

    private async Task NavigateToUni(string subdomain)
    {
        await local.DeleteAsync("Url");
        var uri       = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var hostParts = uri.Authority.Split(':');
        var hostOnly  = hostParts[0];
        var port      = hostParts.Length > 1 ? $":{hostParts[1]}" : "";
        var newHost   = $"{subdomain}.{hostOnly}{port}";
        var url       = $"{uri.Scheme}://{newHost}";
        await TenantState.UpdateTenantFromUri(url);
        NavigationManager.NavigateTo(url, forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var result = await Mediator.Send(new ListAvailableUniversitiesQuery());
        Universities = result ?? new List<GetUniversityInfoResponse>();
        IsLoading = false;
    }

}